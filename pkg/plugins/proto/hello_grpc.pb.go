// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: hello.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GetUsedRate_GetUsedRate_FullMethodName = "/GetUsedRate/GetUsedRate"
)

// GetUsedRateClient is the client API for GetUsedRate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetUsedRateClient interface {
	GetUsedRate(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type getUsedRateClient struct {
	cc grpc.ClientConnInterface
}

func NewGetUsedRateClient(cc grpc.ClientConnInterface) GetUsedRateClient {
	return &getUsedRateClient{cc}
}

func (c *getUsedRateClient) GetUsedRate(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GetUsedRate_GetUsedRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetUsedRateServer is the server API for GetUsedRate service.
// All implementations must embed UnimplementedGetUsedRateServer
// for forward compatibility
type GetUsedRateServer interface {
	GetUsedRate(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGetUsedRateServer()
}

// UnimplementedGetUsedRateServer must be embedded to have forward compatible implementations.
type UnimplementedGetUsedRateServer struct {
}

func (UnimplementedGetUsedRateServer) GetUsedRate(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsedRate not implemented")
}
func (UnimplementedGetUsedRateServer) mustEmbedUnimplementedGetUsedRateServer() {}

// UnsafeGetUsedRateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetUsedRateServer will
// result in compilation errors.
type UnsafeGetUsedRateServer interface {
	mustEmbedUnimplementedGetUsedRateServer()
}

func RegisterGetUsedRateServer(s grpc.ServiceRegistrar, srv GetUsedRateServer) {
	s.RegisterService(&GetUsedRate_ServiceDesc, srv)
}

func _GetUsedRate_GetUsedRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUsedRateServer).GetUsedRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetUsedRate_GetUsedRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUsedRateServer).GetUsedRate(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GetUsedRate_ServiceDesc is the grpc.ServiceDesc for GetUsedRate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetUsedRate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GetUsedRate",
	HandlerType: (*GetUsedRateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsedRate",
			Handler:    _GetUsedRate_GetUsedRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
